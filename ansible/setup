#!/bin/bash -ue

# Set variables
script_path=$(realpath $0)
work_folder=$(dirname $script_path)

while true; do

# Read environment
if [ -f $work_folder/variables/environment.json ]; then
environment_backend=$(jq -r '.environment_backend' $work_folder/variables/environment.json)
environment_manager=$(jq -r '.environment_manager' $work_folder/variables/environment.json)
environment_distro=$(jq -r '.environment_distro' $work_folder/variables/environment.json)
environment_description=$(jq -r '.environment_description' $work_folder/variables/environment.json)
apt_cache_server=$(jq -r '.apt_cache_server' $work_folder/variables/environment.json)
apt_cache_port=$(jq -r '.apt_cache_port' $work_folder/variables/environment.json)
fi

clear
echo "Setup master:"
echo ""
echo "   Environment Backend: ${environment_backend:-}"
echo "   Provisioning Manager: ${environment_manager:-}"
echo "   Linux Distribution: ${environment_distro:-}"
echo "   Description: ${environment_description:-}"
echo ""
echo "   [1] Set environment"
echo "   [2] Setup ansible"
echo "   [3] Setup master services"
echo "   [4] Setup backend"
echo "   [5] Setup provisioning manager"
echo "   [Q] Quit"
echo ""
read -p "Please select: " answer
case $answer in

####################################
1 )
####################################

# Set variables
selection_name=()
selection_backend=()
selection_manager=()
selection_distro=()
selection_description=()
selection_path=()

# Show available environments
clear
echo "Set environment:"
echo ""
i=0
for file in $(ls $work_folder/variables/*/environment.json); do
i=$((i+1))
selection_path[$i]=$(dirname $file)
selection_backend[$i]=$(jq -r '.environment_backend' $file)
selection_manager[$i]=$(jq -r '.environment_manager' $file)
selection_distro[$i]=$(jq -r '.environment_distro' $file)
selection_description[$i]=$(jq -r '.environment_description' $file)
echo "   [$i] ${selection_path[i]}"
echo "       Environment Backend: ${selection_backend[i]}"
echo "       Provisioning Manager: ${selection_manager[i]}"
echo "       Linux Distribution: ${selection_distro[i]}"
echo "       Description: ${selection_description[i]}"
echo ""
done
read -p "Please select: " answer
if [ -z "$answer" ]; then continue; fi
if [ $answer -eq $answer ] 2>/dev/null; then
if [ $answer -lt 1 -o $answer -gt $i ]; then
echo "Selection is out of range"
echo ""
read -n 1 -p "Press any key to continue" dummy
continue
fi
else
continue
fi

# Build environment files inheritance chain
environment_file=${selection_path[answer]}/environment.json
environment_inherit=$(jq -r '.environment_inherit' $environment_file)
environment_chain=$environment_file
while [ "$environment_inherit" != "null" ]; do
environment_file=$work_folder/variables/$environment_inherit/environment.json
if [ ! -f $environment_file ]; then
echo "Environment file '"$environment_inherit_file"' not found"
exit
fi
environment_chain="$environment_file $environment_chain"
environment_inherit=$(jq -r '.environment_inherit' $environment_file)
done

# Combine all inherited environment files
jq -r -s add $environment_chain > $work_folder/variables/environment.json

# Search inheritance chain for machines file
environment_file=${selection_path[answer]}/environment.json
machines_file=${selection_path[answer]}/machines.json
while [ ! -f $machines_file ]; do
environment_inherit=$(jq -r '.environment_inherit' $environment_file)
if [ "$environment_inherit" != "null" ]; then
environment_file=$work_folder/variables/$environment_inherit/environment.json
machines_file=$work_folder/variables/$environment_inherit/machines.json
else
break
fi
done

# Use first found machines file
if [ ! -f $machines_file ]; then
echo "Machines file '"${selection_path[answer]}/machines.json"' not found"
exit
else
cp -f $machines_file $work_folder/variables/machines.json
fi

# Search inheritance chain for ansible config file
environment_file=${selection_path[answer]}/environment.json
ansibleconf_file=${selection_path[answer]}/ansible.cfg
while [ ! -f $ansibleconf_file ]; do
environment_inherit=$(jq -r '.environment_inherit' $environment_file)
if [ "$environment_inherit" != "null" ]; then
environment_file=$work_folder/variables/$environment_inherit/environment.json
ansibleconf_file=$work_folder/variables/$environment_inherit/ansible.cfg
else
break
fi
done

# Use first found ansible config file
if [ -f $ansibleconf_file ]; then
cp -f $ansibleconf_file ~/.ansible.cfg
fi

echo "Task completed"
echo ""
read -n 1 -p "Press any key to continue" dummy
;;

####################################
2 )
####################################

echo "Stop and disable apt daily update ..."
systemctl stop apt-daily.timer
systemctl disable apt-daily.timer
systemctl stop apt-daily.service

echo "Update ubuntu apt sources (/etc/apt/sources.list) ..."
cat << EOF > /etc/apt/sources.list
deb http://$apt_cache_server:$apt_cache_port/au.archive.ubuntu.com/ubuntu/ xenial main restricted universe multiverse
deb http://$apt_cache_server:$apt_cache_port/au.archive.ubuntu.com/ubuntu/ xenial-updates main restricted universe multiverse
deb http://$apt_cache_server:$apt_cache_port/au.archive.ubuntu.com/ubuntu/ xenial-security main restricted universe multiverse
EOF

echo "Update ansible apt sources (ppa:ansible/ansible) ..."
cat << EOF > /etc/apt/sources.list.d/ansible.list
deb http://$apt_cache_server:$apt_cache_port/ppa.launchpad.net/ansible/ansible/ubuntu xenial main
EOF
cat << EOF | apt-key add -
-----BEGIN PGP PUBLIC KEY BLOCK-----
Version: SKS 1.1.6
Comment: Hostname: keyserver.ubuntu.com

mQINBFOXbTABEADKLcY3MYZyHIiCEu8cQ+0UzxZolTYZf8xZ06/d8xzUW/UBPTLVx/40IzWJ
EZU87GCYVXUhdYXECrFQKQOOEWQswBxOt26/g0nIrU0edZ9cCZ9o9+ZOsKDcScWNxWeclLr2
+YHdmX9eph+2p+zIPmhNJaaWV6/bSo1fBi7ganZFRAc13zO8jtQsYyIeoAFwjt1vbk9CifdF
hEchRVbwvZYhZDWfBZjhZ15UOunjo47gEkpK0PsWHY5N3/c75pGMwMTCjHMKno6KFzhdKLaz
/QgbNnpy1aMkA/LITeU6Pgg6iqofrSY3Fx73MCAb8EEytvSV/65wztKzexHjGYxhm5ygoET5
tPyXciX0+XzojkZAHzUEeT5z4kgL6OLyn+JQAyRDNnOJEkYmvwQveZuUjsYUkgc5DJdg6w7l
TgQHWObOENpXls3BDnphA4DJyc0PQODCxdSZo4ZXMLn5lE/0qvAJ6g/wntY/ee/vRKwy9iDM
OWQvihTIY/L70/TnE4qZdaNbOJEvW59LT6GBTrcU1MX2fS5hU/mQa2CNixSVZG98rba3tfNa
LDDNqivkcxtWryEWd0giBzzUS+MhtxhHm77YgxNVyyFn8bXb25/W+Jq+VvWWx2KD3ZwVD37X
8wIBRLVozoH0jHVW7jKTnf2z+D6FCM+pVlm8zV1upXbHbdaRqwARAQABtB9MYXVuY2hwYWQg
UFBBIGZvciBBbnNpYmxlLCBJbmMuiQI4BBMBAgAiBQJTl20wAhsDBgsJCAcDAgYVCAIJCgsE
FgIDAQIeAQIXgAAKCRCTxKP9e7nDZwzdD/9yFq+3ptLyWP1JN3RXsvTIJLhhjOqMMJCOocV0
G3slHeUtdIDmvd2RaS8PeFNSd9QFbUzka7pBXec3a7kgEVorty2/+cZSpEVHT26oAbJnoH7E
1YGii8bbnk9LqOCF/nLpasEqPKqtVzXz+vGB7G0ox8qmRm6JynrMeLBftYemxJ8e4fii6APJ
xE6FPz/AvgcN3BtBguseFwcga6lGcmp0JLofGhTbejfS9dW9bnCFJBtRfzUVd+Cb8aYuzV5z
gCJgqOBJHf0L6xDwn8UuzRfi0MWzEskuC/KxUJqVHMuTaLdrSeP1/czompetbsSHTfDklf/p
4EbSM9VqZFiKr17we0LdigAEv2JnL2Qj0oN3eRNU0sDJ3kZvh5qhnteNgSRM/el0Sly+34CR
ZzX25vd+pOTgwK6VFx3wvWfqn3pVNT9ASNalhogFXuBY2ukYJaiUTPsSR4+KHiD3eIhWyayB
GP+GRvGb5dVC29k4CjLvQM9lISmZrrxGmMGoV9S1dh7siZYECaVW0nKI95d6bBHaKH1g5HJ7
NEsVTwf8LRY/FFpLsEPVw4HNVqqqwhuJnSW70WQ3blh0RIX/+z9hAla+M0kix7r0lS89ZBdT
gwPuiCrkPRpoxi06ah/Q62uP3ZN4+dew1sBZdaC9kaKdOOWTqArVnaPObQgUUJFhY9wUsA==
=qlCh
-----END PGP PUBLIC KEY BLOCK-----
EOF

echo "Setup ansible ..."
apt-get update
apt-get -y install ansible python-requests python-netaddr python-pip python-dnspython python-jmespath
pip --proxy http://$apt_cache_server:$apt_cache_port install -U pip
pip --proxy http://$apt_cache_server:$apt_cache_port install -U pysphere pyvmomi

echo "Task completed"
echo ""
read -n 1 -p "Press any key to continue" dummy
;;

####################################
3 )
####################################

echo "Setup master services ..."
ansible-playbook $work_folder/playbooks/setup.yml -i $work_folder/inventory/hosts -e work_folder=$work_folder -e @$work_folder/variables/common.json -e @$work_folder/variables/environment.json -t services

echo "Task completed"
echo ""
read -n 1 -p "Press any key to reboot" dummy
reboot
;;

####################################
4 )
####################################

echo "Setup backend ($environment_backend) ..."
ansible-playbook $work_folder/playbooks/setup.yml -i $work_folder/inventory/hosts -e work_folder=$work_folder -e @$work_folder/variables/common.json -e @$work_folder/variables/environment.json -t backend

echo "Task completed"
echo ""
read -n 1 -p "Press any key to continue" dummy
;;

####################################
5 )
####################################

echo "Setup provisioning manager ($environment_manager) ..."
ansible-playbook $work_folder/playbooks/setup.yml -i $work_folder/inventory/hosts -e work_folder=$work_folder -e @$work_folder/variables/common.json -e @$work_folder/variables/environment.json -t manager

echo "Task completed"
echo ""
read -n 1 -p "Press any key to continue" dummy
;;

####################################
q|Q )
####################################
break
;;
esac
done
